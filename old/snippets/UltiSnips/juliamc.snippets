snippet jlproject "Julia project template" b
#!/usr/bin/env julia

# ---------------------------------------------------------------------
# Program: ${1:`!v expand('%:t')`}
# Created: `date`
# Updated: `date`
# Author:  Mauricio Caceres <caceres@nber.org>
# Purpose: ${2:${VISUAL:content}}

maindir  = "`!v expand('%:p:h')`";
progmsg  = "`!v expand('%:r')`";
mailprog = "\$maindir/code/`!v expand('%:r')`_99mail.sh"
logfile  = "\$maindir/code/`!v expand('%:r')`.log"
outdir   = "\$maindir/out";
datadir  = "\$maindir/data";

# ---------------------------------------------------------------------
# Startup

isinteractive()? nothing: redirect_stdout(open(logfile, "w"))
versioninfo()
println("\n", repeat("-", 72),
		"\n", "\$(Dates.format(now(), "HH:MM e u d, yyyy"))",
		"\n",
		"\n", "\$progmsg")

try mkdir("\$outdir/fig")    end
try mkdir("\$outdir/tables") end
try mkdir("\$outdir/data")   end

datafile = joinpath(datadir, "data.jld")
outfile  = joinpath(outdir,  "data/out.jld")
outtab   = joinpath(outdir,  "tables/tables.txt")

# ---------------------------------------------------------------------
# Run the things

include(joinpath(maindir, "code/aux.jl"))
include(joinpath(maindir, "code/get.jl"))

@everywhere using Aux
@everywhere using Get

${0}
progstat, progmsg =
try
	Get.main(datadir, maintab);
	"\$progmsg ran [Automated Message]", "Cue the cherubs!"
catch
	"ERROR: \$progmsg", sprint(showerror, err, catch_backtrace())
end

# ---------------------------------------------------------------------
# Cleanup

println("\n", repeat("-", 72),
		"\n", "\$(Dates.format(now(), "HH:MM e u d, yyyy"))",
		"\n",
		"\n", "\$progstat")

run(`$mailprog "\$progmsg"`)
endsnippet

snippet mod "module" b
@everywhere module ${1:${VISUAL:ModuleName}}
	${2:using ${3:RequiredModules}}$0
end
endsnippet

snippet jlstep "Julia step template" b
#!/usr/bin/env julia

# ---------------------------------------------------------------------
# Project: ${1:${VISUAL:project title}}
# Program: ${2:`!v expand('%:t')`}
# Author:  Mauricio Caceres <caceres@nber.org>
# Created: `date`
# Updated: `date`
# Purpose: ${3:purpose}
# Note:    
# Output:  

@everywhere module main
	progmsg = "`!v expand('%:r')`"
	logfile = "`!v expand('%:r')`.log"
	maindir = "../.."
	outdir  = "./out"
	datadir = "./data"

	try mkdir("\$outdir/fig")    end
	try mkdir("\$outdir/tables") end
	try mkdir("\$outdir/data")   end

	datafile = joinpath(datadir, "data.jld")
	outfile  = joinpath(outdir,  "data/out.jld")
	outtab   = joinpath(outdir,  "tables/tables.txt")

	using Get
	function main()
		isinteractive()? nothing: redirect_stdout(open(logfile, "w"))
		versioninfo()
		marker(progmsg)

		progstat, progmsg, rc =
		try
			# Get.main() or whatever you want to run
			"\$progmsg ran [Automated Message]", "Cue the cherubs!", 0
		catch
			"ERROR: \$progmsg", sprint(showerror, err, catch_backtrace()), -1
		end

		marker(progstat)
		return(rc)
	end

	function marker(msg::AbstractString)
		println("\n", repeat("-", 72),
				"\n", "\$msg (\$(Dates.format(now(), "HH:MM e u d, yyyy")))")
	end
end

# ---------------------------------------------------------------------
# Modules

@everywhere module Get
	include("aux.jl")
	using Aux
	# Stuff...
end

# ---------------------------------------------------------------------
# Run the things

rc = main.main()
exit(rc)
endsnippet
